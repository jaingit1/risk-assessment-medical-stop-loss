AWSTemplateFormatVersion: "2010-09-09"
Description: "Complete Risk Assessment System with EKS, ECS, S3, Step Functions, and Lambda."

Parameters:
  EKSClusterName:
    Type: String
    Default: "RiskAssessmentEKSCluster"

  ECSClusterName:
    Type: String
    Default: "RiskAssessmentECSCluster"

  ECRModelImageURI:
    Type: String
    Description: "ECR Image URI for the risk assessment model API"

  ECRStreamlitImageURI:
    Type: String
    Description: "ECR Image URI for the Streamlit web app"

Resources:

  # --- VPC & Networking ---
  RiskAssessmentVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RiskAssessmentVPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RiskAssessmentVPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref RiskAssessmentVPC
      InternetGatewayId: !Ref InternetGateway

  # --- S3 Bucket for Data Processing ---
  RiskAssessmentS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "risk-assessment-data"

  # --- IAM Roles ---
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ECS-S3-StepFunctions-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "states:*"
                Resource: "*"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "Lambda-S3-StepFunctions-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "states:StartExecution"
                Resource: "*"

  # --- Lambda Function (Trigger Step Functions on S3 Upload) ---
  S3UploadTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "TriggerStepFunctionOnUpload"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          def lambda_handler(event, context):
              sfn_client = boto3.client('stepfunctions')
              bucket_name = event['Records'][0]['s3']['bucket']['name']
              file_key = event['Records'][0]['s3']['object']['key']
              response = sfn_client.start_execution(
                  stateMachineArn=os.environ['STEP_FUNCTION_ARN'],
                  input=json.dumps({"bucket": bucket_name, "file_key": file_key})
              )
              return {"statusCode": 200, "body": json.dumps(response)}
      Environment:
        Variables:
          STEP_FUNCTION_ARN: !Ref RiskAssessmentStepFunction

  # --- Step Functions Workflow ---
  RiskAssessmentStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt LambdaExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Risk Assessment Processing Pipeline",
          "StartAt": "Preprocess Data",
          "States": {
            "Preprocess Data": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:::function:PreprocessLambda",
              "Next": "Aggregate Data"
            },
            "Aggregate Data": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:::function:AggregateLambda",
              "Next": "Call Prediction API"
            },
            "Call Prediction API": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:::function:PredictLambda",
              "Next": "Store Results in S3"
            },
            "Store Results in S3": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:::function:StoreResultsLambda",
              "End": true
            }
          }
        }

  # --- ECS for Streamlit App ---
  StreamlitECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName

  StreamlitTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "StreamlitTask"
      Cpu: "256"
      Memory: "512"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: "streamlit-app"
          Image: !Ref ECRStreamlitImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 8501
          Environment:
            - Name: "S3_BUCKET_NAME"
              Value: !Ref RiskAssessmentS3Bucket
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/streamlit-app"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

  StreamlitECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref StreamlitECSCluster
      TaskDefinition: !Ref StreamlitTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2

Outputs:
  StreamlitAppURL:
    Description: "URL of the Streamlit App"
    Value: !Sub "http://${StreamlitECSService}.elb.amazonaws.com:8501"

  S3BucketName:
    Description: "S3 Bucket for File Uploads"
    Value: !Ref RiskAssessmentS3Bucket
