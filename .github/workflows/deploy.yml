name: Deploy Artifacts

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - test
      build-number:
        description: 'Build number'
        required: true
      # run-id:
      #   description: 'Run ID'
      #   required: true
  
permissions:
  contents: read
  id-token: write
  actions: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }} 

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ARTIFACT_KEY: ${{ vars.ARTIFACT_KEY }}
      DEPLOYMENT_KEY: ${{ vars.DEPLOYMENT_KEY }}
      ENVIRONMENT_KEY: ${{ vars.ENVIRONMENT_KEY }}
      build-number: ${{ github.event.inputs.build-number }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      # - name: Log build number and run ID
      #   run: echo "Downloading artifact with name ${{ github.event.inputs.build-number }} from run ID ${{ github.event.inputs.run-id }}"

      # - name: Wait for Artifact to be Available
      #   run: sleep 30

      - name: Download Artifact Manually
        run: |
          ARTIFACT_ID=$(curl -s -H "Authorization: ${{ secrets.ACTIONS_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/jaingit1/risk-assessment-medical-stop-loss/actions/artifacts" \
            | jq -r '.artifacts[0].id')

          curl -L -H "Authorization: token ${{ secrets.ACTIONS_PAT }}" \
            -o artifact.zip \
            "https://api.github.com/repos/jaingit1/risk-assessment-medical-stop-loss/actions/artifacts/$ARTIFACT_ID/zip"

      - name: Extract Artifact
        run: unzip -o artifact.zip
     
      - name: Set Environment Variables
        run: |
          echo "AWS_ACCOUNT_ID=${{env.AWS_ACCOUNT_ID}}" >> $GITHUB_ENV
          echo "ARTIFACT_KEY=${{env.ARTIFACT_KEY}}" >> $GITHUB_ENV
          echo "DEPLOYMENT_KEY=${{env.DEPLOYMENT_KEY}}" >> $GITHUB_ENV
          echo "ENVIRONMENT_KEY=${{env.ENVIRONMENT_KEY}}" >> $GITHUB_ENV
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name ${{ env.ARTIFACT_KEY }}-ecr-repository-${{ env.ENVIRONMENT_KEY }} \
            --template-file cloudformation/risk-assessment-ecr-repository-development.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              AppName=${{ env.ARTIFACT_KEY }}-ecr-repository \
              AppEnv=${{ env.ENVIRONMENT_KEY }} \
              AppVersion=${{ env.build-number}} \
        
      
      - name: Get ECR Repository URI
        id: ecr-uri
        run: |
          ECR_URI=$(aws ecr describe-repositories --repository-names ${{ env.ARTIFACT_KEY }}-ecr-repository --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_URI


      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.ARTIFACT_KEY }}-ecr-repository:latest ./container
          docker tag ${{ env.ARTIFACT_KEY }}-ecr-repository:latest $ECR_URI:latest

      - name: Push Docker image to ECR
        run: docker push $ECR_URI:latest
      
      # - name: Delete CloudFormation Stack
      #   run: |
      #     aws cloudformation delete-stack --stack-name ${{ env.ARTIFACT_KEY }}-ecr-repository-${{ env.ENVIRONMENT_KEY }}

      # - name: Wait for Stack Deletion
      #   run: |
      #     aws cloudformation wait stack-delete-complete --stack-name ${{ env.ARTIFACT_KEY }}-ecr-repository-${{ env.ENVIRONMENT_KEY }}
      #     echo "Stack deletion completed."